# While waiting a proper documentation:
#
# hey.oh: # An unique ID that represent the entry
#   title: This is a test # A title of the vulnerability
#   description: | # A description of the vulnerability
#     Blah Blah
#   flag: drupal # When the entry is for a specific application/framework/cms, a flag must be set
#   confirmed: # A regex that is supposed to be 80-100% sure that the issue is present
#     status: STABLE # Status of the regex (EXPERIMENTAL|UNSTABLE|STABLE)
#     danger: 5 # Dangerosity level on a scale of 10
#     check: | # Regex should be here
#       [...]
#   possible: | # A regex that is supposed to be less than 79% sure that the issue is present (which require manual checking)
#     [same as confirmed...]
#
# ToDo:
#
# - Detection of code comments to prevent false positive
# - Check Session manipulation:
#     SESSION[...$_(GET|POST...)] = $_(GET|POST...)[...]
# - crypto.weak.encryption: Check poor encryption https://secure.php.net/manual/en/function.crypt.php
# - xss.stored and xss.dom: Work on it
# - Check CSRF (Wordpress)
# - files.upload: Detection of vulnerable uploaders
# - Check and fix Evil Regexes if any
# - Add more obfuscation detection regexes
#
# Note:
#
#   Because of the regex limitations (?), we cannot verify variables in queries e.g.
#   $quiz = $_REQUEST[quiz];
#   $wpdb->get_results("SELECT ID, question FROM `wp_quiz_question` WHERE quiz_id='$quiz'");
#
# Global regexes:
#
#    Multilines support:
#       (?:[\S\s]*)
#
#    Detect if the line is a comment:
#      ?
#
#    Start of function catcher:
#       (?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)
#
#       hash('sha1', 'hey');
#          |--|
#       hash  (   'sha1', 'hey');
#          |-------|
#       hash  ( /* */  'sha1', 'hey');
#          |------------|
#       hash  ( /* content content */  'sha1', 'hey');
#          |----------------------------|
#       hash /* hash is a beautiful function but... */  ( /* content content */  'sha1', 'hey');
#          |----------------------------|
#          |------------
#       hash  ( /*     |
#       you            |
#       know           |
#       sha1           |
#       is             |
#       dead           |
#       */  'sha1', 'hey');
#       -----|
#          |----------------------------
#       hash /*lol*/  ( // test test ! |
#                                      |
#       /*hey*/'sha1', 'hey');
#       --------|
#          |----------------------------
#       hash /*lol*/  ( // test test ! |
#                                      |
#             /**/                     |
#                                      |
#       'sha1', 'hey');
#       -|
#
#    Variable (end of arguments) catcher:
#       (?:((["'\]`]{1}))((([\s:),;])+)(?:\.([\s]+)\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))*))
#
#       hash  (   'sha1', "hey");
#                     |**|   |--|
#
#       case 'apache2handler':
#                          |--|
#
#       include 'thisfile';
#                       |--|
#
#       For sql.injection.prepared in this case:
#       $dupe = $wpdb->get_results( $wpdb->prepare  (   "SELECT *  FROM " . (string)$_GET[table] . " $wpdb->test WHERE comment_post_ID = $_GET AND comment_author_url = " . $_POST['url'], $comment_author_url) );
#                                                                      |**|                       |**|                                                                                 |---|
#
#    Variable names catcher:
#       \$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)
#       \$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})
#
#       $awesome = supersecureclass::crypt('hi');
#      |--------|
#
#    Superglobal variables catcher:
#       \$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER|SESSION)
#       \$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER)
#       \$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER\[("|'|`|)HTTP_(?:.*)\]|SERVER\[("|'|`|)(REQUEST_URI|QUERY_STRING)("|'|`|)\])
#
#       $awesome = $_SERVER[REQUEST_URI];
#       $awesome = $_SERVER['REQUEST_URI'];
#                 |------------------------|
#       $name = 'Name: ' . $_GET['name'];
#                         |-----|
#
