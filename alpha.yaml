---
high:
  -
    for: php
    title: Weak hashing algorithms used
    status: STABLE
    check: |
      ((hash(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50}))*)(md5|sha1)(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})
    patterns:
      true: |
        $beautiful = sha1(0 * rand(0, 50));
        echo 'MyDataDevil RNG -> ' . hash('md5', md5($_SERVER['DOCUMENT_ROOT'] . $_SERVER['REQUEST_TIME_FLOAT']));
        $test = hash  (  'sha1', 'hey');
  -
    for: php
    title: Weak hashing algorithms used for passwords and secrets
    status: UNSTABLE
    check: |
      (secret|password|pass|key)(?:.*)((hash(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50}))*)(md5|sha(1|256|384|512))(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})
    patterns:
      true: |
        echo 'Here is your supersafe password' . hash('sha512', $_POST['password']);
        $secret_key = hash('sha1'    , $_GET['username']);
        $api_secret = md5('mysupersecret');
        $password =     sha1('thisisapassword'   );
  -
    for: php
    title: LFI / RFI (Strict)
    status: STABLE
    check: |
      (require|include)((_once)*)(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})(?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER\[("|'|`|)HTTP_(?:.*)\]|SERVER\[("|'|`|)(REQUEST_URI|QUERY_STRING)("|'|`|)\])
    patterns:
      true: |
        include $_GET['inject'];
        include_once $_POST['file'];
        include_once badsanitizer($_POST['file']);
        include (  $_SERVER['REQUEST_URI']     );
        require_once('/home/opt/database/' . $_COOKIE['city']);
        require_once(      $_REQUEST['file'] . '.txt');
        require_once      $_REQUEST['file'] . '.txt'
      false: |
        requireonce($_GET['file']);
  -
    for: php
    title: CRLF Injection / HTTP Response Splitting # Inspired by foospidy/GrepBugs
    status: EXPERIMENTAL
    check: |
      header(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})(?:.*)(\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER))
  -
    for: php
    title: XSS vulnerabilities # Inspired by foospidy/GrepBugs
    status: EXPERIMENTAL
    check: |
      (echo|((v|)print(_r|f|)|exit|die|var_dump|trigger_error|user_error|odbc_result_all|ovrimos_result_all|ifx_htmltbl_result))(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})(?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER)
  -
    for: php
    title: PHP Code / Object Execution (Strict)
    status: UNSTABLE
    # Look behind is used here, workaround for Javascript needed
    # Here we additionally check for $_SESSION because these commands are very dangerous and we don't want an attacker to use it if he found a way to manipulate the session
    check: |
      (unserialize|assert|passthru|(?<!curl_)(shell|pcntl|)exec|(\s|=)system|(expect_|)popen|proc_open|eval|dl|register_tick_function|register_shutdown_function)(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})(?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER|SESSION)
    patterns:
      true: |
        echo unserialize(stripslashes($_POST["awebvoice_data"]));
        return unserialize($_COOKIE['token']);
        $user_data = unserialize($_GET['data']);
        assert('1 == ' . $_COOKIE['isValid'], 'This is valid!');
        passthru('rm -rf ' . $_SERVER[REQUEST_URI], $err);
        echo exec('ping ' . $_SERVER[REMOTE_ADDR]);
        register_tick_function(   array(&$_GET, 'my_method'), true);
      false: |
        curl_exec($ch);
        $session_data = unserialize($tmp[0]);
        assert('2 < 1', 'Two is less than one');
        register_shutdown_function('shutdown');
        passthru("cat myfile.zip",$err);
        echo exec('whoami');
        $output = shell_exec('ls -lart');
        pcntl_exec('/path/to/cmd');
        $last_line = system('ls', $retval);
        $last_line =system('ls', $retval);
        $process = proc_open('php', $descriptorspec, $pipes, $cwd, $env);
        eval("\$str = \"$str\";");
        dl($prefix . 'sqlite.' . PHP_SHLIB_SUFFIX);
        register_tick_function('my_function', true);
  -
    for: php:wordpress
    title: Unsafe SQL queries (Strict)
    status: UNSTABLE
    # Because of the regex limitations (?), we cannot verify variables in queries e.g.
    # $quiz = $_REQUEST[quiz];
    # $wpdb->get_results("SELECT ID, question FROM `wp_quiz_question` WHERE quiz_id='$quiz'");
    check: |
      \$(([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})*)db->(get_([a-zA-Z0-9_]+))(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})(?!(.*)([a-zA-Z0-9_]{0,6})db->prepare)(?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER\[("|'|`|)HTTP_(?:.*)\]|SERVER\[("|'|`|)(REQUEST_URI|QUERY_STRING)("|'|`|)\])(.*?;)
    patterns:
      true: |
        $wpdb->get_results("SELECT ID, question FROM `wp_quiz_question` WHERE quiz_id='$_REQUEST[quiz]'");
        $wpdb->get_row("select * from ".$this->tbl_tw_accounts." where id = ".$_POST['tw_account_id']);
        $dupe = $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = " . '$_REQUEST[quiz]' . " AND comment_author_url = %s", $comment_author_url) );
      false: |
        $fb_accounts = $wpdb->get_results("SELECT id, name FROM ".$this->tbl_fb_accounts, ARRAY_A);
        $db->get_var (    "SELECT COUNT(*) FROM {$wpdb->prefix}posts WHERE " . $id . "=true" );
        $wpdb->get_row ( $query );
        $wpdb->get_results( "SHOW CREATE TABLE $wpdb->table", ARRAY_N );
        $db->get_var (    "SELECT COUNT(*) FROM {$wpdb->prefix}posts" );
        $wpdb->get_results( "SHOW CREATE TABLE $table", ARRAY_N );
        $wpdb->get_var("select count(id) from {$wpdb->prefix}posts p left join {$wpdb->prefix}linkit_cached_posts c on p.guid = c.guid where post_status = 'publish' and post_type = 'post' and (post_modified > '{$datetime}' or isnull(c.guid));");
        $dupe = $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_author_url = %s", $comment_post_ID, $_REQUEST[quiz]) );
medium:
  -
    for: php
    title: Unsafe cryptographic secure values generator
    status: UNSTABLE
    # Google Dork:
    #   site:php.net This function does not generate cryptographically secure values, and should not be used for cryptographic purposes.
    # Also, SQL RAND() is also detected in this check because it is not a cryptographically secure function
    #   Source: https://stackoverflow.com/questions/35880963/does-mysql-have-a-cryptographically-secure-random-number-generator/35881049#35881049
    check: |
      (uniqid|(mt_|s|)rand|str-shuffle|lcg-value)(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})
    patterns:
      true: |
        uniqid('');
        mysql_query('SELECT username FROM users WHERE id=RAND()');
        echo str-shuffle("hello");
        $mysecretnumber = rand ($_GET[SECRET_TOKEN], 100);
  -
    for: php:wordpress
    title: Unsafe SQL queries (Wordpress)
    status: UNSTABLE
    check: |
      \$(([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})*)db->(get_([a-zA-Z0-9_]+))(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})(?!(.*)([a-zA-Z0-9_]{0,6})db->prepare)(?:.*)\$(?!([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})db)(.*?;)
    patterns:
      true: |
        $wpdb->get_results( "SHOW CREATE TABLE $table", ARRAY_N );
        $wpdb->get_var("select count(id) from {$wpdb->prefix}posts p left join {$wpdb->prefix}linkit_cached_posts c on p.guid = c.guid where post_status = 'publish' and post_type = 'post' and (post_modified > '{$datetime}' or isnull(c.guid));");
        $db->get_var (    "SELECT COUNT(*) FROM {$wpdb->prefix}posts WHERE " . $id . "=true" );
        $wpdb->get_row ( $query );
      false: |
        $wpdb->get_results( "SHOW CREATE TABLE $wpdb->table", ARRAY_N );
        $db->get_var (    "SELECT COUNT(*) FROM {$wpdb->prefix}posts" );
        $dupe = $wpdb->get_results( $wpdb->prepare("SELECT * FROM $wpdb->comments WHERE comment_post_ID = %d AND comment_author_url = %s", $comment_post_ID, $comment_author_url) );
  -
    for: php
    title: Possible LFI / RFI (Wordpress)
    status: STABLE
    check: |
      (require|include)((_once)*)(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})(?:.*)\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)
    patterns:
      true: |
        include $file;
        include_once $file;
        include (  $file);
        require_once($file);
        require_once $file
        require   ($file  )
  -
    for: php
    title: Possible PHP Code / Object Execution
    status: UNSTABLE
    # Look behind is used here, workaround for Javascript needed
    check: |
      (unserialize|assert|passthru|(?<!curl_)(shell|pcntl|)exec|(\s|=)system|(expect_|)popen|proc_open|eval|dl|register_tick_function|register_shutdown_function)(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})
    patterns:
      true: |
        echo unserialize(stripslashes($_POST["awebvoice_data"]));
        return unserialize($_COOKIE['token']);
        $user_data = unserialize($_GET['data']);
        $session_data = unserialize($tmp[0]);
        assert('1 == ' . $_COOKIE['isValid'], 'This is valid!');
        assert('2 < 1', 'Two is less than one');
        passthru('rm -rf ' . $_SERVER[REQUEST_URI], $err);
        passthru("cat myfile.zip",$err);
        echo exec('whoami');
        echo exec('ping ' . $_SERVER[REMOTE_ADDR]);
        $output = shell_exec('ls -lart');
        pcntl_exec('/path/to/cmd');
        $last_line = system('ls', $retval);
        $last_line =system('ls', $retval);
        $process = proc_open('php', $descriptorspec, $pipes, $cwd, $env);
        eval("\$str = \"$str\";");
        dl($prefix . 'sqlite.' . PHP_SHLIB_SUFFIX);
        register_tick_function('my_function', true);
        register_tick_function(   array(&$_GET, 'my_method'), true);
        register_shutdown_function('shutdown');
      false: |
        curl_exec($ch);
  -
    for: php
    title: CRLF Injection / HTTP Response Splitting # Inspired by foospidy/GrepBugs
    status: EXPERIMENTAL
    check: |
      header(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})(?:.*)(\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER))
  -
    for: php
    title: Possible informations leak # Inspired by foospidy/GrepBugs
    status: STABLE
    check: |
      (((phpinfo|highlight_file|show_source)(\s*(["'`$(])*))|error_reporting(?:.*)E_(ALL|ERROR|WARNING|PARSE))(?:.*)\);
    patterns:
      true: |
        highlight_file('index.php5');
        phpinfo();
        error_reporting(E_ALL & ~E_NOTICE);
        highlight_file(    $_GET['myfile']);

low:

info:
  -
    for: php
    title: Network communications
    status: EXPERIMENTAL
    # Optimization for file_get_contents|fopen needed
    # Regex for IPv6 / IPv4 for socket_connect
    # fsockopen use ((ssl|tls):\/\/|)
    check: |
      (curl_exec|ftp_connect|ftp_ssl_connect|fsockopen|pfsockopen|socket_bind|socket_connect|socket_listen|socket_create_listen|socket_accept|socket_getpeername|socket_send)\s?\(((?:.*)\);
      (file_get_contents|fopen)\s?\((?:.*)\);
  -
    for: php
    title: Obfuscated code via base64
    status: EXPERIMENTAL
    check: |
      # Fingerprinting of FOPO - Free Online PHP Obfuscator
      (\\x62\\x61\\x73\\x65\\x36\\64\\137\\x64\\145\\x63\\x6f\\x64\\x65|eval(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)(?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})(?:[A-Za-z0-9+/]+))
    patterns:
      true: |
        $e2afdc5b="\x62\x61\x73\x65\x36\64\137\x64\145\x63\x6f\x64\x65";
        eval($e2afdc5b("Ly9OSXRYYy9JRXZla0NKcXFMbUEzODZWQUowcURqZjdDdng2S0RRYkRKditpVElDYWFRVU5WNlJJNXV
        eval($e2afdc5b(SHELL_DEFINE
        eval($e2afdc5b($test
      false: |
        eval($e2afdc5b("-----BEGIN RSA PRIVATE KEY-----
        eval($-fail("-----BEGIN RSA PRIVATE KEY-----

# ToDo:
#
# - Detection of code comments required to prevent false positive
# - Check Session manipulation:
#     SESSION[...] = $_(GET|POST...)[...]
# - Check poor encryption https://secure.php.net/manual/en/function.crypt.php
# - Check CSRF (Wordpress)
#
#
# Global regexes:
#
#    Detect comments:
#      ?
#   
#    Simplify function catching:
#       (?:(["'`$(\s]|(\/\*(?:.*)\*\/)){1,50})
#   
#       hash  (   'sha1', 'hey');
#          |-------|
#       hash  ( /* */  'sha1', 'hey');
#          |------------|
#       hash  ( /* content content */  'sha1', 'hey');
#          |----------------------------|
#
#    Variable names:
#       \$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)
#       \$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})
#   
#       $awesome = supersecureclass::crypt('hi')
#      |--------|
#    
#    Catch superglobal variables:
#       (?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER|SESSION)
#       (?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER)
#       (?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER\[("|'|`|)HTTP_(?:.*)\]|SERVER\[("|'|`|)(REQUEST_URI|QUERY_STRING)("|'|`|)\])
#   
#       $awesome = $_SERVER[REQUEST_URI];
#       $awesome = $_SERVER['REQUEST_URI'];
#                 |------------------------|
#       $name = 'Name: ' . $_GET['name'];
#                      |-------------|
#