# ToDo:
# - Detection of comments required to prevent false positive
# - Check Session manipulation:
#     SESSION[...] = $_(GET|POST...)[...]
# - Check poor encryption https://secure.php.net/manual/en/function.crypt.php
# - Check CSRF (Wordpress)

---
high:
  -
    title: "Weak hashing algorithms used"
    check: |
      (hash\(("|'|`))(md4|md5|sha1)("|'|`)*
      (md5|sha1)((\s?\()
  -
    title: "Weak hashing algorithms used for passwords"
    check: |
      (secret|password|pass|key)(.*)((hash\(("|'|`))*)(md5|sha1|sha256|sha384|sha512)((\s?\()|("|'|`))*
  -
    title: "LFI / RFI"
    check: |
      (require|include)((_once)*)(\s+|\s?\()(.*)\$_(GET|POST|PUT|PATCH|REQUEST|COOKIE|DELETE|SERVER\[("|'|`|)HTTP_(.*)\]|SERVER\[("|'|`|)REQUEST_URI("|'|`|)\])(.*?(;|\s))
  -
    title: "CRLF Injection / HTTP Response Splitting" # Inspired by foospidy/GrepBugs
    check: |
      header\s?\(("|'|`|$)(.*)(\$.*)
      _SERVER\[\s*('|")HTTP_HOST('|")\s*\]
  -
    title: "XSS vulnerabilities via echo" # Inspired by foospidy/GrepBugs
    check: |
      (echo(\s*\()?|((v|)print(_r|f)?|exit|die|var_dump|trigger_error|user_error|odbc_result_all|ovrimos_result_all|ifx_htmltbl_result)\s*\()\s*[^;]*\$_(GET|POST|PUT|PATCH|REQUEST|COOKIE|DELETE|SERVER)
  -
    title: "Dangerous (system-related) PHP commands" # Inspired by foospidy/GrepBugs
    check: |
      (passthru|(shell_|)exec|system|pcntl_exec|(expect_|)popen|proc_open|eval|dl|register_tick_function|register_shutdown_function)\s?\(
  -
    for: wordpress
    title: "Unsafe SQL queries"
    check: |
      \$([a-zA-Z0-9_]{0,6})db->(get_([a-zA-Z0-9_]*))\(((?![\s\S]{0,10}\$wpdb)[\s\S]{0,10})(("|'|`)+)(.*)\$(?!([a-zA-Z0-9_]{0,6})db)(.*?(;|\s))
  -
    for: wordpress
    title: "Unsafe SQL queries (Strict)"
    check: |
      \$([a-zA-Z0-9_]{0,6})db->(get_([a-zA-Z0-9_]*))\(((?![\s\S]{0,10}\$wpdb)[\s\S]{0,10})(("|'|`)+)(.*)\$_(GET|POST|PUT|PATCH|REQUEST|COOKIE|DELETE|SERVER\[("|'|`|)HTTP_(.*)\]|SERVER\[("|'|`|)REQUEST_URI("|'|`|)\])(.*?(;|\s))

medium:
  -
    title: "Unsafe cryptographic secure values generator"
    # Google Dork:
    #   site:php.net This function does not generate cryptographically secure values, and should not be used for cryptographic purposes.
    # Also, SQL RAND() is also detected in this check because it is not a cryptographically secure function
    #   Source: https://stackoverflow.com/questions/35880963/does-mysql-have-a-cryptographically-secure-random-number-generator/35881049#35881049
    check: |
      (uniqid|(mt_|s|)rand|str-shuffle|lcg-value)\s?\(
  -
    title: "Possible LFI / RFI"
    # This check:
    # include $file;
    # include_once $file;
    # include ($file);
    # require_once($file);
    # require($file)
    check: |
      (require|include)((_once)*)(\s+|\s?\()(.*)\$([a-zA-Z0-9_]*)(.*?(;|\s))
  -
    title: "Possible informations leak" # Inspired by foospidy/GrepBugs
    check: |
      (phpinfo|highlight_file|show_source|error_reporting(.*)E_(ALL|ERROR|WARNING|PARSE))\s?\(

low:

info:
  -
    title: "Network communications"
    # Optimization for file_get_contents|fopen needed
    # Regex for IPv6 / IPv4 for socket_connect
    # fsockopen use ((ssl|tls):\/\/|)
    check: |
      (curl_exec|ftp_connect|ftp_ssl_connect|fsockopen|pfsockopen|socket_bind|socket_connect|socket_listen|socket_create_listen|socket_accept|socket_getpeername|socket_send)\s?\(
      (file_get_contents|fopen)\s?\(
