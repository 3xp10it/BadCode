---
php:
  -
    # Files-related stuff
    file:
      -
        inclusion.rl:
          title: Remote and Local File Inclusion
          description: |
            The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a "dynamic file inclusion" mechanisms implemented in the target application. The vulnerability occurs due to the use of user-supplied input without proper validation.
            This can lead to something as outputting the contents of the file, but depending on the severity, it can also lead to:
              * Code execution on the web server
              * Code execution on the client-side such as JavaScript which can lead to other attacks such as cross site scripting (XSS)
              * Denial of Service (DoS)
              * Sensitive Information Disclosure
            Remote File Inclusion (also known as RFI) is the process of including remote files through the exploiting of vulnerable inclusion procedures implemented in the application. This vulnerability occurs, for example, when a page receives, as input, the path to the file that has to be included and this input is not properly sanitized, allowing external URL to be injected. Although most examples point to vulnerable PHP scripts, we should keep in mind that it is also common in other technologies such as JSP, ASP and others.
          confirmed:
            status: UNSTABLE
            danger: 9
            check: |
              ((require|include)((_once)*)|fopen|file_get_contents)(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)(?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER\[("|'|`|)HTTP_(?:.*)\]|SERVER\[("|'|`|)(REQUEST_URI|QUERY_STRING)("|'|`|)\])
          possible:
            status: UNSTABLE
            danger: 7
            check: |
              ((require|include)((_once)*)|fopen|file_get_contents)(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)(?:.*)\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*))

    # Code execution stuff
    remoteexec:
      -
        codeandobject:
          title: PHP Code / Object Execution
          description: |
            No description yet
          # Look behind is used here, workaround for Javascript needed
          confirmed:
            status: UNSTABLE
            danger: 10
            # Here we additionally check $_SESSION because these commands are very sensible and we don't want an attacker to use them if there is a way to manipulate the session
            check: |
              (unserialize|assert|passthru|(?<!curl_)(shell|pcntl|)exec|(\s|=)system|(expect_|)popen|proc_open|eval|dl|register_tick_function|register_shutdown_function)(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)(?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER|SESSION)
          possible:
            status: UNSTABLE
            danger: 8
            check: |
              (unserialize|assert|passthru|(?<!curl_)(shell|pcntl|)exec|(\s|=)system|(expect_|)popen|proc_open|eval|dl|register_tick_function|register_shutdown_function)(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)
      -
        codeandobject.viaphpsapiname:
          title: Possible PHP Code / Object Execution (predicted via php_sapi_name checks)
          possible:
            status: UNSTABLE
            danger: 8
            # Here we only allow cli / cli-server
            # Names has been taken here: https://secure.php.net/possible/en/function.php-sapi-name.php
            # The list is not exhaustive so we may add more names later
            # php_sapi_name before 5.2.2 will output cgi instead of cli but who cares of these versions
            #
            # Regex (disassembled):
            # (php_sapi_name(?:\()(.*)\))(?:[\S\s]*)((aolserver|apache(?:(2(filter|handler))*)|caudium|cgi((-fcgi)*)|continuity|embed|fpm-fcgi|isapi|litespeed|milter|nsapi|phttpd|pi3web|roxen|thttpd|tux|webjames){1})(?:((["'`]{1}))(([\s:),;]){1})))
            # (((aolserver|apache(?:(2(filter|handler))*)|caudium|cgi((-fcgi)*)|continuity|embed|fpm-fcgi|isapi|litespeed|milter|nsapi|phttpd|pi3web|roxen|thttpd|tux|webjames){1})(?:((["'`]{1}))(([\s:),;]){1})(?:[\S\s]*)php_sapi_name(?:\()(.*)\))
            check: |
              ((php_sapi_name(?:\()(.*)\))(?:[\S\s]*)((aolserver|apache(?:(2(filter|handler))*)|caudium|cgi((-fcgi)*)|continuity|embed|fpm-fcgi|isapi|litespeed|milter|nsapi|phttpd|pi3web|roxen|thttpd|tux|webjames){1})(?:((["'`]{1}))(([\s:),;]){1})))|(((aolserver|apache(?:(2(filter|handler))*)|caudium|cgi((-fcgi)*)|continuity|embed|fpm-fcgi|isapi|litespeed|milter|nsapi|phttpd|pi3web|roxen|thttpd|tux|webjames){1})(?:((["'`]{1}))(([\s:),;]){1})(?:[\S\s]*)php_sapi_name(?:\()(.*)\)))

    # Headers-related stuff
    header:
      -
        crlf:
          title: CRLF Injection / HTTP Response Splitting
          description: |
            No description yet
          confirmed:
            status: EXPERIMENTAL
            danger: 7
            check: |
              header(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)(?:.*)(\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER))
          possible:
            status: EXPERIMENTAL
            danger: 5
            check: |
              header(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)(?:.*)(\$)

    # XSS stuff
    xss:
      -
        description: |
            Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.
            An attacker can use XSS to send a malicious script to an unsuspecting user. The end userâ€™s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page. For more details on the different types of XSS flaws, see: Types of Cross-Site Scripting.
        reflected:
          title: Reflected XSS Attack
          description: |
            No description yet
          confirmed:
            status: EXPERIMENTAL
            danger: 8
            check: |
              (echo|((v|)print(_r|f|)|exit|die|var_dump|trigger_error|user_error|odbc_result_all|ovrimos_result_all|ifx_htmltbl_result))(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)(?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER)
        stored:
          # Stored XSS Attack
        dom:
          # DOM-based XSS Attack

    # SQL-related stuff
    sql:
      -
        sqli:
          title: SQL Injection (Wordpress)
          description: |
            No description yet
          flag: wordpress
          confirmed:
            status: UNSTABLE
            danger: 9
            check: |
              \$(([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})*)db->(get_([a-zA-Z0-9_]+))(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)(?!(.*)([a-zA-Z0-9_]{0,6})db->prepare)(?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER\[("|'|`|)HTTP_(?:.*)\]|SERVER\[("|'|`|)(REQUEST_URI|QUERY_STRING)("|'|`|)\])(?!([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})db)(.*?;)
          possible:
            status: UNSTABLE
            danger: 8
            check: |
              \$(([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})*)db->(get_([a-zA-Z0-9_]+))(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)(?!(.*)([a-zA-Z0-9_]{0,6})db->prepare)(?:.*)\$(?!([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})db)(.*?;)
        sqli.prepared:
          title: SQL Injection in prepared statement (Wordpress)
          description: |
            No description yet
          flag: wordpress
          confirmed:
            status: UNSTABLE
            danger: 9
            check: |
              \$(([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})*)db->(get_([a-zA-Z0-9_]+))(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})db->prepare(?:.*)\$_(GET|POST|FILES|COOKIE|REQUEST|ENV|SERVER\[("|'|`|)HTTP_(?:.*)\]|SERVER\[("|'|`|)(REQUEST_URI|QUERY_STRING)("|'|`|)\])(?!([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})db)(.*?["'`](?:\s*),)
          possible:
            status: UNSTABLE
            danger: 8
            check: |
              \$(([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})*)db->(get_([a-zA-Z0-9_]+))(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})db->prepare(?:.*)\$(?!([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]{0,6})db)(.*?["'`](?:\s*),)

    # Crypto-related stuff
    crypto:
      -
        weak.hash:
          title: Weak hashing algorithms used
          description: |
            MD5 and SHA1 are broken in many ways so you should use at least SHA256 to hash datas (except passwords which must use a password-based key derivation function)
          confirmed:
            status: STABLE
            danger: 5
            check: |
              ((hash(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+))*)(md5|sha1)(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)
      -
        weak.hash.secrets:
          title: Weak hashing algorithms used for passwords and secrets
          description: |
            Computing power is evolving every days and simply hashing (even with a salt) is no longer recommended for passwords.
            Please use a password-based key derivation function instead.
          confirmed:
            status: UNSTABLE
            danger: 6
            check: |
              (secret|password|pass|key)(?:.*)((hash(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+))*)(md5|sha(1|256|384|512))(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)
      -
        weak.rng:
          title: Unsafe cryptographic secure values generator
          description: |
            No description yet
          confirmed:
            # Google Dork:
            #   site:php.net This function does not generate cryptographically secure values, and should not be used for cryptographic purposes.
            status: UNSTABLE
            danger: 4
            # SQL RAND() is also detected in this check because it is not a cryptographically secure function
            #   Source: https://stackoverflow.com/questions/35880963/does-mysql-have-a-cryptographically-secure-random-number-generator/35881049#35881049
            check: |
              (uniqid|((array|mt)_|s|)rand|str-shuffle|lcg-value)(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)

    # Obfuscation-related stuff
    obfuscation:
      -
        description: |
            Backdoors and shells often use obfuscation to bypass AVs.
            Obfuscated functions can contain code that BadCode cannot verify.
        fopo:
          title: Obfuscated code by FOPO - Free Online PHP Obfuscator
          description: |
            No description yet
          confirmed:
            status: STABLE
            danger: 6
            check: |
              (\\x62\\x61\\x73\\x65\\x36\\64\\137\\x64\\145\\x63\\x6f\\x64\\x65|eval(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)\$([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)(?:[A-Za-z0-9+/]+))

    network:
      -
        description: |
          All commands that use network activity should be catched here.
        activity:
          title: Network communications
          description: |
            No description yet
          confirmed:
            status: EXPERIMENTAL
            danger: 0
            # Optimization and work here for
            # Optimization file_get_contents|fopen
            # - Regex for IPv6 / IPv4 for socket_connect
            # - fsockopen use ((ssl|tls):\/\/|)
            # (file_get_contents|fopen|mail|curl_exec|ftp_connect|ftp_ssl_connect|fsockopen|pfsockopen|socket_bind|socket_connect|socket_listen|socket_create_listen|socket_accept|socket_getpeername|socket_send)(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)
            check: |
              (file_get_contents|fopen|mail|curl_exec|ftp_connect|ftp_ssl_connect|fsockopen|pfsockopen|socket_bind|socket_connect|socket_listen|socket_create_listen|socket_accept|socket_getpeername|socket_send)(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)

    leak:
    -
      activity:
      title: Possible informations leak # Inspired by foospidy/GrepBugs
      description: |
        No description yet
      confirmed:
        status: UNSTABLE
        danger: 3
        check: |
          ((phpinfo|highlight_file|show_source)(?:(?:["'`$(\s]|(\/\*(?:[\S\s][^\*\/]*)\*\/)|\/\*\*\/|((\/\/|#))(?:[\S\s][^"'`]*))+)|error_reporting(?:.*)E_(ALL|ERROR|WARNING|PARSE))(?:.*)\);
